package main

import (
	"bufio"
	"fmt"
	"log"
	"os"
	"path"
	"path/filepath"
	"strings"
)

func isSolutionFileName(name string) bool {
	names := strings.Split(name, ".")
	// Executable files
	if len(names) == 1 {
		return false
	}
	// Temporary files generated by flycheck
	if strings.Contains(names[0], "flycheck") {
		return false
	}
	// Files for testing
	if strings.Contains(names[0], "test") {
		return false
	}
	// Alternative solutions
	if strings.Contains(names[0], "-") {
		return false
	}
	return true
}

func findResult(scriptDir string, pattern string) (numContests int, numSolved int, numUnsolved int) {
	matches, err := filepath.Glob(path.Join(scriptDir, pattern))
	if err != nil {
		log.Fatal(err)
	}

	for _, match := range matches {
		seen := map[string]bool{}
		remain := map[string]bool{}
		filepath.Walk(match, func(path string, info os.FileInfo, err error) error {
			if info.IsDir() {
				return nil
			}
			if info.Name() == "remain.txt" {
				// 読む
				file, err := os.Open(path)
				if err != nil {
					log.Println(err)
					return err
				}
				defer file.Close()

				scanner := bufio.NewScanner(file)
				for scanner.Scan() {
					line := scanner.Text()
					tokens := strings.Split(line, " ")
					if len(tokens) > 0 {
						remain[tokens[0]] = false
					}
				}
			} else {
				names := strings.Split(info.Name(), ".")
				if isSolutionFileName(info.Name()) {
					seen[names[0]] = false
				}
			}
			return nil
		})
		numContests += 1
		for name := range seen {
			if _, ok := remain[name]; !ok {
				numSolved += 1
			}
		}
		numUnsolved += len(remain)
	}
	return
}

func main() {
	var markdown bool
	args := os.Args
	if len(args) >= 2 && args[1] == "md" {
		markdown = true
	}

	exec, err := os.Executable()
	if err != nil {
		log.Fatal(err)
	}
	scriptDir := path.Dir(exec)

	data := []struct {
		ContestKind string
		Pattern     string
	}{{"ABC", "abc*"}, {"ARC", "arc*"}, {"AGC", "agc*"}}

	if markdown {
		fmt.Printf("| ContestKind | #Contests | #Solved | #Unsolved | Solved ratio | |\n")
		fmt.Printf("| - | - | - | - | - | - |\n")
	}

	for _, config := range data {
		numContests, numSolved, numUnsolved := findResult(scriptDir, config.Pattern)
		if markdown {
			adjustedRatio := (numSolved*200/(numSolved+numUnsolved) + 1) / 2
			if adjustedRatio == 100 && numUnsolved > 0 {
				adjustedRatio = 99
			}
			fmt.Printf("| %s | %d | %d | %d | %.2f%% | ![%d%%](https://progress-bar.dev/%d?title=Solved) |\n", config.ContestKind, numContests, numSolved, numUnsolved, float64(numSolved)/float64(numSolved+numUnsolved)*100.0, adjustedRatio, adjustedRatio)
		} else {
			fmt.Printf("%s:\n", config.ContestKind)
			fmt.Printf("#Contests: %d\n", numContests)
			fmt.Printf("#Solved: %d\n", numSolved)
			fmt.Printf("#Unsolved: %d\n", numUnsolved)
			fmt.Printf("Solved ratio: %.2f%%\n", float64(numSolved)/float64(numSolved+numUnsolved)*100.0)
		}
	}
}
