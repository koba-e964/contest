srcArr = [
	[[255,  0,  0], [  0,255,  0], [  0,  0,255]],
	[[  0,255,255], [255,  0,155], [255,255,  0]],
	[[255,  0,  0], [  0,255,  0], [  0,  0,255]],
	[[  0,255,255], [255,  0,155], [255,255,  0]],
	[[255,  0,  0], [  0,255,  0], [  0,  0,255]],
	[[  0,255,255], [255,  0,155], [255,255,  0]],
	[[255,  0,  0], [  0,255,  0], [  0,  0,255]],
	[[  0,255,255], [255,  0,155], [255,255,  0]],
	[[255,  0,  0], [  0,255,  0], [  0,  0,255]],
	[[  0,255,255], [255,  0,155], [255,255,  0]],
	[[255,  0,  0], [  0,255,  0], [  0,  0,255]],
	[[  0,255,255], [255,  0,155], [255,255,  0]],
	[[255,  0,  0], [  0,255,  0], [  0,  0,255]],
	[[  0,255,255], [255,  0,155], [255,255,  0]],
	[[255,  0,  0], [  0,255,  0], [  0,  0,255]],
	[[  0,255,255], [255,  0,155], [255,255,  0]]
];

// バイリニア補間後の画素
destArr = [];
for ( y = 0; y < 200; y ++) {
	destArr[y] =[];
	for ( x = 0; x < 400; x ++) {
		destArr[y][x] = new Array(3);
	}
}
scaleY=40/3;

// バイリニア補間法
for ( y = 0; y < 200; y ++) {
	for ( x = 0; x < 400; x ++) {
		 x0 = Math.floor(x / 200);
		 y0 = Math.floor(y / scaleY);

		 x1 = x / 200 - x0;
		 y1 = y / scaleY - y0;

		 col0 = srcArr[y0    ][x0    ];
		 col1 = srcArr[y0    ][x0 + 1];
		 col2 = srcArr[y0 + 1][x0    ];
		 col3 = srcArr[y0 + 1][x0 + 1];

		for ( c = 0; c < 3; c ++) {
			destArr[y][x][c] = Math.round(
				  (1 - x1) * (1 - y1) * col0[c]
				+      x1  * (1 - y1) * col1[c]
				+ (1 - x1) *      y1  * col2[c]
				+      x1  *      y1  * col3[c]
			);
		}
	}
}

// 戻り値結合
for( y = 0; y < 200; y ++) {
	for ( x = 0; x < 400; x ++) {
		destArr[y][x] = destArr[y][x].join("/");
	}
	destArr[y] = destArr[y].join(",");
}
return destArr.join("\n")